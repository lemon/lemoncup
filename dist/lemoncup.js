// Generated by CoffeeScript 1.12.7
(function() {
  var DOCTYPES, Lemoncup, METHODS, REGULAR_TAGS, SELF_CLOSING_TAGS, fn1, fn2, i, j, lemoncup, len, len1, tag,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DOCTYPES = {
    '5': '<!DOCTYPE html>'
  };

  REGULAR_TAGS = 'a abbr address article aside audio b bdi bdo blockquote body button canvas caption cite code colgroup datalist dd del details dfn div dl dt em fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins kbd label legend li main map mark menu meter nav noscript object ol optgroup option output p pre progress q rp rt ruby s samp script section select small span strong sub summary sup style svg table tbody td textarea tfoot th thead time title tr u ul video'.split(' ');

  SELF_CLOSING_TAGS = 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ');

  METHODS = 'comment doctype _escape ie normalizeArgs raw render tag text'.split(' ');

  Lemoncup = (function() {
    function Lemoncup() {
      this._html = null;
      this._data = [];
    }

    Lemoncup.prototype.clear = function() {
      return this._data = [];
    };

    Lemoncup.prototype.attrOrder = ['id', 'class'];

    Lemoncup.prototype.resetBuffer = function(html) {
      var previous;
      if (html == null) {
        html = null;
      }
      previous = this._html;
      this._html = html;
      return previous;
    };

    Lemoncup.prototype.render = function() {
      var args, fn, html, name, previous, template;
      template = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      for (name in lemoncup) {
        fn = lemoncup[name];
        if (typeof global !== "undefined" && global !== null) {
          global[name] = fn;
        }
        if (typeof window !== "undefined" && window !== null) {
          window[name] = fn;
        }
      }
      previous = this.resetBuffer('');
      try {
        template.apply(null, args);
      } finally {
        html = this.resetBuffer(previous);
      }
      for (name in lemoncup) {
        fn = lemoncup[name];
        if (typeof global !== "undefined" && global !== null) {
          delete global[name];
        }
        if (typeof window !== "undefined" && window !== null) {
          delete window[name];
        }
      }
      return html;
    };

    Lemoncup.prototype.renderAttr = function(name, value) {
      var k, ref, v;
      if (value == null) {
        return " " + name;
      }
      if (value === false) {
        return '';
      }
      if (value === true) {
        value = name;
      }
      if (name === 'data' && typeof value === 'object') {
        return ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(this.renderAttr("data-" + k, v));
          }
          return results;
        }).call(this)).join('');
      }
      if (name === 'class' && typeof value === 'object') {
        value = ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            if (v) {
              results.push("" + k);
            }
          }
          return results;
        })()).join(' ');
        if (value === '') {
          return '';
        }
      }
      if (name === 'style' && typeof value === 'object') {
        value = ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(k + ":" + v);
          }
          return results;
        })()).join(';');
        if (value === '') {
          return '';
        }
      }
      if (name[0] === "$") {
        name = "lemon-on:" + (name.replace('$', ''));
      }
      if (name === 'on' && typeof value === 'object') {
        return ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(this.renderAttr("lemon-on:" + k, v));
          }
          return results;
        }).call(this)).join('');
      }
      if (name[0] === '_') {
        name = "lemon-bind:" + (name.replace('_', ''));
      }
      if (name === 'bind' && typeof value === 'object') {
        return ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(this.renderAttr("lemon-bind:" + k, v));
          }
          return results;
        }).call(this)).join('');
      }
      if (name === 'ref') {
        name = "lemon-ref";
      }
      if (((ref = typeof value) === 'function' || ref === 'object') || name === 'lemon-data') {
        this._data.push(value);
        value = this._data.length - 1;
      }
      return " " + name + "=" + (this._quote(this._escape(value.toString())));
    };

    Lemoncup.prototype.renderAttrs = function(obj) {
      var i, len, name, ref, result, value;
      result = '';
      ref = this.attrOrder;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        if (name in obj) {
          result += this.renderAttr(name, obj[name]);
        }
      }
      for (name in obj) {
        value = obj[name];
        if (indexOf.call(this.attrOrder, name) >= 0) {
          continue;
        }
        result += this.renderAttr(name, value);
      }
      return result;
    };

    Lemoncup.prototype.renderContents = function() {
      var contents, rest, result;
      contents = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (contents == null) {

      } else if (typeof contents === 'function') {
        result = contents.apply(this, rest);
        if (typeof result === 'string') {
          return this.text(result);
        }
      } else {
        return this.text(contents);
      }
    };

    Lemoncup.prototype.isSelector = function(string) {
      var ref;
      return string.length > 1 && ((ref = string.charAt(0)) === '#' || ref === '.');
    };

    Lemoncup.prototype.parseSelector = function(selector) {
      var classes, i, id, klass, len, ref, ref1, token;
      id = null;
      classes = [];
      ref = selector.split('.');
      for (i = 0, len = ref.length; i < len; i++) {
        token = ref[i];
        token = token.trim();
        if (id) {
          classes.push(token);
        } else {
          ref1 = token.split('#'), klass = ref1[0], id = ref1[1];
          if (klass !== '') {
            classes.push(token);
          }
        }
      }
      return {
        id: id,
        classes: classes
      };
    };

    Lemoncup.prototype.normalizeArgs = function(args) {
      var arg, attrs, classes, contents, i, id, index, len, parsedSelector, selector;
      attrs = {};
      selector = null;
      contents = null;
      for (index = i = 0, len = args.length; i < len; index = ++i) {
        arg = args[index];
        if (arg != null) {
          switch (typeof arg) {
            case 'string':
              if (index === 0 && this.isSelector(arg)) {
                selector = arg;
                parsedSelector = this.parseSelector(arg);
              } else {
                contents = arg;
              }
              break;
            case 'function':
            case 'number':
            case 'boolean':
              contents = arg;
              break;
            case 'object':
              if (arg.constructor === Object) {
                attrs = arg;
              } else {
                contents = arg;
              }
              break;
            default:
              contents = arg;
          }
        }
      }
      if (parsedSelector != null) {
        id = parsedSelector.id, classes = parsedSelector.classes;
        if (id != null) {
          attrs.id = id;
        }
        if (classes != null ? classes.length : void 0) {
          if (attrs["class"]) {
            classes.push(attrs["class"]);
          }
          attrs["class"] = classes.join(' ');
        }
      }
      return {
        attrs: attrs,
        contents: contents,
        selector: selector
      };
    };

    Lemoncup.prototype.tag = function() {
      var args, attrs, contents, ref, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      ref = this.normalizeArgs(args), attrs = ref.attrs, contents = ref.contents;
      this.raw("<" + tagName + (this.renderAttrs(attrs)) + ">");
      this.renderContents(contents);
      return this.raw("</" + tagName + ">");
    };

    Lemoncup.prototype.selfClosingTag = function() {
      var args, attrs, contents, ref, tag;
      tag = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      ref = this.normalizeArgs(args), attrs = ref.attrs, contents = ref.contents;
      return this.raw("<" + tag + (this.renderAttrs(attrs)) + " />");
    };

    Lemoncup.prototype.comment = function(text) {
      return this.raw("<!--" + (this._escape(text)) + "-->");
    };

    Lemoncup.prototype.doctype = function(type) {
      if (type == null) {
        type = 5;
      }
      return this.raw(DOCTYPES[type]);
    };

    Lemoncup.prototype.ie = function(condition, contents) {
      this.raw("<!--[if " + (this._escape(condition)) + "]>");
      this.renderContents(contents);
      return this.raw("<![endif]-->");
    };

    Lemoncup.prototype.text = function(s) {
      this._html += (s != null) && this._escape(s.toString()) || '';
      return null;
    };

    Lemoncup.prototype.raw = function(s) {
      if (s == null) {
        return;
      }
      this._html += s;
      return null;
    };

    Lemoncup.prototype._escape = function(text) {
      return text.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    };

    Lemoncup.prototype._quote = function(value) {
      return "\"" + value + "\"";
    };

    Lemoncup.prototype.bind = function() {
      var i, len, method, methods, results;
      methods = [].concat(METHODS, REGULAR_TAGS, SELF_CLOSING_TAGS);
      results = [];
      for (i = 0, len = methods.length; i < len; i++) {
        method = methods[i];
        results.push(this[method] = this[method].bind(this));
      }
      return results;
    };

    return Lemoncup;

  })();

  fn1 = function(tag) {
    return Lemoncup.prototype[tag] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.tag.apply(this, [tag].concat(slice.call(args)));
    };
  };
  for (i = 0, len = REGULAR_TAGS.length; i < len; i++) {
    tag = REGULAR_TAGS[i];
    fn1(tag);
  }

  fn2 = function(tag) {
    return Lemoncup.prototype[tag] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.selfClosingTag.apply(this, [tag].concat(slice.call(args)));
    };
  };
  for (j = 0, len1 = SELF_CLOSING_TAGS.length; j < len1; j++) {
    tag = SELF_CLOSING_TAGS[j];
    fn2(tag);
  }

  lemoncup = new Lemoncup();

  lemoncup.bind();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    global.lemoncup = lemoncup;
    module.exports = lemoncup;
  } else {
    window.lemoncup = lemoncup;
  }

}).call(this);
